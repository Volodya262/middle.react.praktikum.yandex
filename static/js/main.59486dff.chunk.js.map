{"version":3,"sources":["components/chat/chat-list/ChatItem.tsx","components/chat/chat-list/ChatList.tsx","components/chat/messages-list/MessageItem.tsx","components/chat/messages-list/MessagesGroup.tsx","components/chat/messages-list/MessagesList.tsx","components/chat/Chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ChatItem","props","chatItemClassName","isSelected","formattedDate","format","chatPreview","date","className","onClick","onChatSelected","id","src","logoUrl","alt","title","author","message","ChatList","sortedChatsWithSelectedInfo","chatPreviews","sort","a","b","getTime","map","chat","selectedChatId","chatInfo","key","MessageItem","formattedTime","avatarUrl","MessagesGroup","messages","msg","MessageList","grouppedMessages","_","groupBy","startOfDay","value","Number","sortBy","e","group","Date","ipsum","chats","chatMessages","chatId","Chat","res","find","msgs","getChatMessages","newState","state","selectedChatMessages","setState","this","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.59486dff.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {format} from 'date-fns';\r\nimport './ChatItem.css'\r\nimport {IChatPreview} from \"../../../model/i-chat-preview\";\r\n\r\ninterface IProps {\r\n    chatPreview: IChatPreview,\r\n    isSelected?: boolean,\r\n    onChatSelected?: (id: number) => void;\r\n}\r\n\r\nconst ChatItem: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const onChatSelected = () => {\r\n        if (props.onChatSelected != null) {\r\n            props.onChatSelected(props.chatPreview.id);\r\n        }\r\n    };\r\n\r\n    const chatItemClassName = props.isSelected ? \"chat-item chat-item__selected\" : \"chat-item\";\r\n\r\n    const formattedDate = format(props.chatPreview.date, 'dd.MM.yyyy');\r\n\r\n    return (\r\n        <div className={chatItemClassName} onClick={onChatSelected}>\r\n            <img src={props.chatPreview.logoUrl} className=\"chat-item__logo\" alt=\"logo\"/>\r\n            <div className=\"chat-item__all-text-container\">\r\n                {/* ↑ chat-item__all-text-container вылезает за границы chat-item без костыля*/}\r\n                <div className=\"chat-item__title-and-date-container\">\r\n                    <span className=\"chat-item__title\">{props.chatPreview.title}</span>\r\n                    <span className=\"chat-item__date\">{formattedDate}</span>\r\n                </div>\r\n                <div className=\"chat-item__author-and-message-container\">\r\n                    <span className=\"chat-item__author\">{props.chatPreview.author}:</span>\r\n                    <span className=\"chat-item__message\">{props.chatPreview.message}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatItem;","import * as React from \"react\";\r\nimport {IChatPreview} from \"../../../model/i-chat-preview\";\r\nimport ChatItem from \"./ChatItem\";\r\nimport \"./ChatList.css\"\r\n\r\ninterface IProps {\r\n    chatPreviews: IChatPreview[],\r\n    selectedChatId?: number\r\n    onChatSelected: (id: number) => void;\r\n}\r\n\r\nconst ChatList: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const sortedChatsWithSelectedInfo = props.chatPreviews\r\n        .sort((a, b) => b.date.getTime() - a.date.getTime())\r\n        .map(chat => ({chatPreview: chat, isSelected: chat.id === props.selectedChatId}));\r\n\r\n    return (\r\n        <div className=\"chat-list-container\">\r\n            {sortedChatsWithSelectedInfo.map(chatInfo => (\r\n                <ChatItem key={chatInfo.chatPreview.id}\r\n                          chatPreview={chatInfo.chatPreview}\r\n                          isSelected={chatInfo.isSelected}\r\n                          onChatSelected={props.onChatSelected}/>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatList;","import * as React from 'react';\r\nimport './MessageItem.css'\r\nimport {format} from \"date-fns\";\r\nimport {IMessage} from \"../../../model/i-message\";\r\n\r\nconst MessageItem: React.FunctionComponent<IMessage> = (props: IMessage) => {\r\n\r\n    const formattedTime = format(props.date, 'HH:mm'); // HH - 24h format\r\n\r\n    return (\r\n        <div className=\"message-item\">\r\n            <img src={props.avatarUrl} className=\"message-item__avatar\" alt=\"user avatar\"/>\r\n            <div className=\"message-item__all-text-container\">\r\n                <div className=\"message-item__author-and-date-container\">\r\n                    <span className=\"message-item__author\">{props.author}</span>\r\n                    <span className=\"message-item__date\">{formattedTime}</span>\r\n                </div>\r\n                <div className=\"message-item__author-and-message-container\">\r\n                    <div className=\"message-item__message\">{props.message}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessageItem;","import * as React from 'react';\r\nimport {IMessage} from \"../../../model/i-message\";\r\nimport {format} from \"date-fns\";\r\nimport MessageItem from \"./MessageItem\";\r\n\r\ninterface IProps {\r\n    date: Date;\r\n    messages: IMessage[]\r\n}\r\n\r\nconst MessagesGroup: React.FunctionComponent<IProps> = (props: IProps) => (\r\n    <div>\r\n        <div className=\"date\">{format(props.date, 'dd.MM.yyyy')}</div>\r\n        {props.messages.map(msg => (<MessageItem {...msg}/>))}\r\n    </div>\r\n);\r\n\r\nexport default MessagesGroup;","import * as React from 'react';\r\nimport {IMessage} from \"../../../model/i-message\";\r\nimport './MessagesList.css'\r\nimport _ from \"lodash\";\r\nimport {startOfDay} from \"date-fns\";\r\nimport MessagesGroup from \"./MessagesGroup\";\r\n\r\ninterface IProps {\r\n    messages?: IMessage[];\r\n}\r\n\r\nconst MessageList: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const grouppedMessages = _(props.messages)\r\n        .groupBy(msg => startOfDay(msg.date).getTime())\r\n        .map((value, key) => ({date: Number(key), messages: value}))\r\n        .sortBy(e => e.date)\r\n        .map(group => ({date: new Date(group.date), messages: group.messages}))\r\n        .value();\r\n\r\n    return (\r\n        <div className=\"messages-list-container\">\r\n            {grouppedMessages.map(group => (\r\n                <MessagesGroup key={group.date.getTime()} date={group.date} messages={group.messages}/>))}\r\n        </div>)\r\n}\r\n\r\nexport default MessageList;","import * as React from \"react\";\r\nimport {IChatPreview} from \"../../model/i-chat-preview\";\r\nimport ChatList from \"./chat-list/ChatList\";\r\nimport {IChatMessages} from \"../../model/i-chat-messages\";\r\nimport {IMessage} from \"../../model/i-message\";\r\nimport MessageList from \"./messages-list/MessagesList\";\r\nimport './Chat.css'\r\n\r\nconst ipsum = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua';\r\n\r\nconst chats: IChatPreview[] = [\r\n    {\r\n        id: 1,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'vova22',\r\n        date: new Date(),\r\n        message: 'здесь был Вова',\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 2,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'vova34',\r\n        date: new Date(),\r\n        message: 'здесь был Вова',\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 3,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'vasya',\r\n        date: new Date(2020, 0, 1),\r\n        message: ipsum,\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 4,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'vasya',\r\n        date: new Date(2020, 0, 2),\r\n        message: ipsum,\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 5,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'vasya',\r\n        date: new Date(2020, 1, 2),\r\n        message: ipsum,\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 6,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'vasya',\r\n        date: new Date(),\r\n        message: ipsum,\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 7,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'vasya',\r\n        date: new Date(),\r\n        message: ipsum,\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 8,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'vasya',\r\n        date: new Date(),\r\n        message: ipsum,\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 9,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'vasya',\r\n        date: new Date(),\r\n        message: ipsum,\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 10,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'vasya',\r\n        date: new Date(),\r\n        message: ipsum,\r\n        title: 'чатик с Вовой'\r\n    }\r\n]\r\n\r\nconst chatMessages: IChatMessages[] = [\r\n    {\r\n        chatId: 1,\r\n        messages: [\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 1),\r\n                message: 'олды тут...',\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        chatId: 2,\r\n        messages: [\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 1, 12),\r\n                message: 'всем привет!',\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            },\r\n            {\r\n                author: 'Валя',\r\n                date: new Date(2020, 0, 1, 13),\r\n                message: 'Привет!!!!',\r\n                avatarUrl: 'https://placekitten.com/250/250'\r\n            },\r\n            {\r\n                author: 'Валя',\r\n                date: new Date(2020, 0, 1, 14),\r\n                message: 'Как дела?????',\r\n                avatarUrl: 'https://placekitten.com/250/250'\r\n            },\r\n            {\r\n                author: 'Валя',\r\n                date: new Date(2020, 0, 1, 16),\r\n                message: 'ау??????',\r\n                avatarUrl: 'https://placekitten.com/250/250'\r\n            },\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 2, 12),\r\n                message: 'Настал следующий день.' + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum,\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        chatId: 3,\r\n        messages: [\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 1),\r\n                message: 'раз',\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            },\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 3),\r\n                message: 'три',\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            },\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 2),\r\n                message: 'два',\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            }\r\n        ]\r\n    },\r\n]\r\n\r\nfunction getChatMessages(chatId: number): IMessage[] { // как будто сходили на бэк лел\r\n    const res = chatMessages.find(msgs => msgs.chatId === chatId);\r\n    return res != null ? res.messages : [];\r\n}\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\ninterface IState {\r\n    chats: IChatPreview[],\r\n    selectedChatId?: number; // if null then no chat is selected\r\n    selectedChatMessages?: IMessage[]; // if null then no chat is selected\r\n}\r\n\r\nclass Chat extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            chats: chats\r\n        }\r\n    }\r\n\r\n    onChatSelected = (id: number) => {\r\n        const messages = getChatMessages(id);\r\n        const newState = {...this.state, selectedChatId: id, selectedChatMessages: messages}\r\n        this.setState(newState);\r\n    };\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <div className=\"chat-window\">\r\n                <ChatList chatPreviews={this.state.chats}\r\n                          selectedChatId={this.state.selectedChatId}\r\n                          onChatSelected={this.onChatSelected}/>\r\n                <MessageList messages={this.state.selectedChatMessages}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport './App.css';\r\nimport Chat from \"./components/chat/Chat\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Chat/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}