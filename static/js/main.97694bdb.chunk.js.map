{"version":3,"sources":["serviceWorker.ts","stub-data.ts","components/chat/chat-item/ChatItem.tsx","components/chat/chat-list/ChatList.tsx","utils/group-by-as-array.ts","utils/group-by.ts","components/chat/message-item/MessageItem.tsx","components/chat/messages-group/MessagesGroup.tsx","components/chat/messages-list/MessagesList.tsx","utils/sort-by.ts","components/chat/Chat.tsx","components/app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ipsum","chats","id","logoUrl","author","date","Date","message","title","chatMessages","chatId","messages","avatarUrl","ChatItem","props","chatItemClassName","isSelected","formattedDate","format","chatPreview","className","onClick","onChatSelected","src","alt","ChatList","chatPreviews","selectedChatId","sortedChatsWithSelectedInfo","sort","a","b","getTime","map","chat","chatInfo","key","groupByAsArray","arr","keySelector","groups","Map","item","has","groupItem","get","Error","push","set","groupBy","res","forEach","values","items","MessageItem","formattedTime","MessagesGroup","msg","MessageList","grouppedMessages","compareFn","sortedKeys","find","sortBy","startOfDay","group","Chat","state","selectedChatMessages","getChatMessages","setState","msgs","this","React","Component","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"sVAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+CCfAC,G,MAAQ,8HAEDC,EAAwB,CACjC,CACIC,GAAI,EACJC,QAAS,kCACTC,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,GACxBC,QAAS,iDACTC,MAAO,wEAEX,CACIN,GAAI,EACJC,QAAS,kCACTC,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,EAAG,IAC3BC,QAAS,wHAA2BP,EAAQA,EAAQA,EAAQA,EAAQA,EAAQA,EAAQA,EAAQA,EAC5FQ,MAAO,wEAEX,CACIN,GAAI,EACJC,QAAS,kCACTC,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,GACxBC,QAAS,qBACTC,MAAO,wEAEX,CACIN,GAAI,EACJC,QAAS,kCACTC,OAAQ,QACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,GACxBC,QAASP,EACTQ,MAAO,yEAIFC,EAAgC,CACzC,CACIC,OAAQ,EACRC,SAAU,CACN,CACIP,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,GACxBC,QAAS,iDACTK,UAAW,qCAIvB,CACIF,OAAQ,EACRC,SAAU,CACN,CACIP,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,EAAG,IAC3BC,QAAS,wHAA2BP,EAAQA,EAAQA,EAAQA,EAAQA,EAAQA,EAAQA,EAAQA,EAC5FY,UAAW,mCAEf,CACIR,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,EAAG,IAC3BC,QAAS,2CACTK,UAAW,mCAEf,CACIR,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,EAAG,IAC3BC,QAAS,mDACTK,UAAW,mCAEf,CACIR,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,EAAG,IAC3BC,QAAS,qBACTK,UAAW,mCAEf,CACIR,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,EAAG,IAC3BC,QAAS,wHAA2BP,EAAQA,EAAQA,EAAQA,EAAQA,EAAQA,EAAQA,EAAQA,EAC5FY,UAAW,qCAIvB,CACIF,OAAQ,EACRC,SAAU,CACN,CACIP,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,GACxBC,QAAS,qBACTK,UAAW,mCAEf,CACIR,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,GACxBC,QAAS,qBACTK,UAAW,mCAEf,CACIR,OAAQ,2BACRC,KAAM,IAAIC,KAAK,KAAM,EAAG,GACxBC,QAAS,qBACTK,UAAW,sC,gBC/FdC,G,MAA4C,SAACC,GACtD,IAMMC,EAAoBD,EAAME,WAAa,gCAAkC,YAEzEC,EAAgBC,YAAOJ,EAAMK,YAAYd,KAAM,cAErD,OACI,yBAAKe,UAAWL,EAAmBM,QAXT,WACE,MAAxBP,EAAMQ,gBACNR,EAAMQ,eAAeR,EAAMK,YAAYjB,MAUvC,yBAAKqB,IAAKT,EAAMK,YAAYhB,QAASiB,UAAU,kBAAkBI,IAAI,SACrE,yBAAKJ,UAAU,iCAEX,yBAAKA,UAAU,uCACX,0BAAMA,UAAU,oBAAoBN,EAAMK,YAAYX,OACtD,0BAAMY,UAAU,mBAAmBH,IAEvC,yBAAKG,UAAU,2CACX,0BAAMA,UAAU,qBAAqBN,EAAMK,YAAYf,OAAvD,KACA,0BAAMgB,UAAU,sBAAsBN,EAAMK,YAAYZ,cCtB/DkB,EAA4C,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,aAAcJ,EAAoC,EAApCA,eAAgBK,EAAoB,EAApBA,eAC/EC,EAA8BF,EAC/BG,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE1B,KAAK2B,UAAYF,EAAEzB,KAAK2B,aACzCC,KAAI,SAAAC,GAAI,MAAK,CAACf,YAAae,EAAMlB,WAAYkB,EAAKhC,KAAOyB,MAE9D,OACI,yBAAKP,UAAU,uBACVQ,EAA4BK,KAAI,SAAAE,GAAQ,OACrC,kBAAC,EAAD,CAAUC,IAAKD,EAAShB,YAAYjB,GAC1BiB,YAAagB,EAAShB,YACtBH,WAAYmB,EAASnB,WACrBM,eAAgBA,S,uBCVnC,SAASe,EAA4BC,EAAcC,GACtD,IAAMN,ECRH,SAA8BK,EAAcC,GAC/C,IADuG,EACjGC,EAAS,IAAIC,IADoF,cAGpFH,GAHoF,IAGvG,2BAAwB,CAAC,IAAdI,EAAa,QACdN,EAAMG,EAAYG,GACxB,GAAIF,EAAOG,IAAIP,GAAM,CACjB,IAAMQ,EAAYJ,EAAOK,IAAIT,GAC7B,GAAiB,MAAbQ,EACA,MAAM,IAAIE,MAAM,4BAEpBF,EAAUG,KAAKL,QAEfF,EAAOQ,IAAIZ,EAAK,CAACM,KAZ8E,8BAgBvG,OAAOF,EDRKS,CAAQX,EAAKC,GACnBW,EAA4B,GAElC,OADAjB,EAAIkB,SAAQ,SAACC,EAAQhB,GAAT,OAAiBc,EAAIH,KAAK,CAACX,IAAKA,EAAKiB,MAAOD,OACjDF,E,UEXEI,EAAiD,SAAC,GAAwC,IAAvClD,EAAsC,EAAtCA,OAAQQ,EAA8B,EAA9BA,UAAWP,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,QAE/EgD,EAAgBrC,YAAOb,EAAM,SAEnC,OACI,yBAAKe,UAAU,gBACX,yBAAKG,IAAKX,EAAWQ,UAAU,uBAAuBI,IAAI,gBAC1D,yBAAKJ,UAAU,oCACX,yBAAKA,UAAU,2CACX,0BAAMA,UAAU,wBAAwBhB,GACxC,0BAAMgB,UAAU,sBAAsBmC,IAE1C,yBAAKnC,UAAU,8CACX,yBAAKA,UAAU,yBAAyBb,OCR/CiD,EAAiD,SAAC,GAAD,IAAEnD,EAAF,EAAEA,KAAMM,EAAR,EAAQA,SAAR,OAC1D,6BACI,yBAAKS,UAAU,QAAQF,YAAOb,EAAM,eACnCM,EAASsB,KAAI,SAAAwB,GAAG,OAAK,kBAAC,EAAgBA,QCDlCC,EAA+C,SAAC,GAAgB,IAGnEC,ECTH,SAA6BrB,EACAC,EACAqB,GAEhC,IAFqF,EAE/EV,EAAe,GACfW,EAAavB,EAAIL,IAAIM,GAAaV,KAAK+B,GAHwC,cAInEC,GAJmE,yBAI1EzB,EAJ0E,QAK3EiB,EAAQf,EAAIwB,MAAK,SAAApB,GAAI,OAAIH,EAAYG,KAAUN,KACrD,GAAa,MAATiB,EACA,MAAM,IAAIP,MAAM,4BAEpBI,EAAIH,KAAKM,IALb,2BAA+B,IAJsD,8BAYrF,OAAOH,EDLkBa,CADK1B,EAF0C,EAAd1B,UAED,IAAI,SAAA8C,GAAG,OAAIO,YAAWP,EAAIpD,MAAM2B,cAClC,SAAAiC,GAAK,OAAIA,EAAM7B,OAAK,SAACN,EAAGC,GAAJ,OAAUD,EAAIC,KACpFE,KAAI,SAAAgC,GAAK,MAAK,CAAC5D,KAAM,IAAIC,KAAK2D,EAAM7B,KAAMzB,SAAUsD,EAAMZ,UAE/D,OACI,yBAAKjC,UAAU,2BACVuC,EAAiB1B,KAAI,SAAAgC,GAAK,OACvB,kBAAC,EAAD,CAAe7B,IAAK6B,EAAM5D,KAAK2B,UAAW3B,KAAM4D,EAAM5D,KAAMM,SAAUsD,EAAMtD,gBEP/EuD,EAAb,4MACIC,MAAgB,CACZlE,MAAOA,EACPmE,qBAAsB,GACtBzC,eAAgB,MAJxB,EAYIL,eAAiB,SAACpB,GACd,IAAMS,EAAW,EAAK0D,gBAAgBnE,GACtC,EAAKoE,SAAL,eAAkB,EAAKH,MAAvB,CAA8BxC,eAAgBzB,EAAIkE,qBAAsBzD,MAdhF,8DAOoBD,GACZ,IAAMwC,EAAMzC,EAAaqD,MAAK,SAAAS,GAAI,OAAIA,EAAK7D,SAAWA,KACtD,OAAc,MAAPwC,EAAcA,EAAIvC,SAAW,KAT5C,+BAkBQ,OACI,yBAAKS,UAAU,eACX,kBAAC,EAAD,CAAUM,aAAc8C,KAAKL,MAAMlE,MACzB0B,eAAgB6C,KAAKL,MAAMxC,eAC3BL,eAAgBkD,KAAKlD,iBAC/B,kBAAC,EAAD,CAAaX,SAAU6D,KAAKL,MAAMC,4BAvBlD,GAA0BK,IAAMC,WCVnBC,EAA+B,WACxC,OACI,yBAAKvD,UAAU,OACX,kBAAC,EAAD,QCDZwD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SZiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjF,c","file":"static/js/main.97694bdb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {IChatPreview} from \"./model/i-chat-preview\";\r\nimport {IChatMessages} from \"./model/i-chat-messages\";\r\n\r\nconst ipsum = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua';\r\n\r\nexport const chats: IChatPreview[] = [\r\n    {\r\n        id: 1,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'Вова',\r\n        date: new Date(2020, 0, 1),\r\n        message: 'олды тут...',\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 2,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'Вова',\r\n        date: new Date(2020, 0, 1, 12),\r\n        message: 'Настал следующий день.' + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum,\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 3,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'Вова',\r\n        date: new Date(2020, 0, 2),\r\n        message: 'три',\r\n        title: 'чатик с Вовой'\r\n    },\r\n    {\r\n        id: 4,\r\n        logoUrl: 'https://placekitten.com/200/200',\r\n        author: 'vasya',\r\n        date: new Date(2020, 0, 2),\r\n        message: ipsum,\r\n        title: 'чатик с Вовой'\r\n    }\r\n]\r\n\r\nexport const chatMessages: IChatMessages[] = [\r\n    {\r\n        chatId: 1,\r\n        messages: [\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 1),\r\n                message: 'олды тут...',\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        chatId: 2,\r\n        messages: [\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 1, 12),\r\n                message: 'Настал следующий день.' + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum,\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            },\r\n            {\r\n                author: 'Валя',\r\n                date: new Date(2020, 0, 1, 13),\r\n                message: 'Привет!!!!',\r\n                avatarUrl: 'https://placekitten.com/250/250'\r\n            },\r\n            {\r\n                author: 'Валя',\r\n                date: new Date(2020, 0, 1, 14),\r\n                message: 'Как дела?????',\r\n                avatarUrl: 'https://placekitten.com/250/250'\r\n            },\r\n            {\r\n                author: 'Валя',\r\n                date: new Date(2020, 0, 1, 16),\r\n                message: 'ау??????',\r\n                avatarUrl: 'https://placekitten.com/250/250'\r\n            },\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 2, 12),\r\n                message: 'Настал следующий день.' + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum + ipsum,\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        chatId: 3,\r\n        messages: [\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 1),\r\n                message: 'раз',\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            },\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 3),\r\n                message: 'три',\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            },\r\n            {\r\n                author: 'Вова',\r\n                date: new Date(2020, 0, 2),\r\n                message: 'два',\r\n                avatarUrl: 'https://placekitten.com/200/200'\r\n            }\r\n        ]\r\n    },\r\n]\r\n","import React from 'react';\r\nimport {format} from 'date-fns';\r\nimport './ChatItem.css'\r\nimport {IChatPreview} from \"../../../model/i-chat-preview\";\r\n\r\ninterface IProps {\r\n    chatPreview: IChatPreview,\r\n    isSelected?: boolean,\r\n    onChatSelected?: (id: number) => void;\r\n}\r\n\r\nexport const ChatItem: React.FunctionComponent<IProps> = (props) => {\r\n    const onChatSelectedHandler = () => {\r\n        if (props.onChatSelected != null) {\r\n            props.onChatSelected(props.chatPreview.id);\r\n        }\r\n    };\r\n\r\n    const chatItemClassName = props.isSelected ? \"chat-item chat-item__selected\" : \"chat-item\";\r\n\r\n    const formattedDate = format(props.chatPreview.date, 'dd.MM.yyyy');\r\n\r\n    return (\r\n        <div className={chatItemClassName} onClick={onChatSelectedHandler}>\r\n            <img src={props.chatPreview.logoUrl} className=\"chat-item__logo\" alt=\"logo\"/>\r\n            <div className=\"chat-item__all-text-container\">\r\n                {/* ↑ chat-item__all-text-container вылезает за границы chat-item без костыля*/}\r\n                <div className=\"chat-item__title-and-date-container\">\r\n                    <span className=\"chat-item__title\">{props.chatPreview.title}</span>\r\n                    <span className=\"chat-item__date\">{formattedDate}</span>\r\n                </div>\r\n                <div className=\"chat-item__author-and-message-container\">\r\n                    <span className=\"chat-item__author\">{props.chatPreview.author}:</span>\r\n                    <span className=\"chat-item__message\">{props.chatPreview.message}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {IChatPreview} from \"../../../model/i-chat-preview\";\r\nimport \"./ChatList.css\"\r\nimport {ChatItem} from \"../chat-item/ChatItem\";\r\n\r\ninterface IProps {\r\n    chatPreviews: IChatPreview[],\r\n    selectedChatId?: number | null\r\n    onChatSelected: (id: number) => void;\r\n}\r\n\r\nexport const ChatList: React.FunctionComponent<IProps> = ({chatPreviews, onChatSelected, selectedChatId}) => {\r\n    const sortedChatsWithSelectedInfo = chatPreviews\r\n        .sort((a, b) => b.date.getTime() - a.date.getTime())\r\n        .map(chat => ({chatPreview: chat, isSelected: chat.id === selectedChatId}));\r\n\r\n    return (\r\n        <div className=\"chat-list-container\">\r\n            {sortedChatsWithSelectedInfo.map(chatInfo => (\r\n                <ChatItem key={chatInfo.chatPreview.id}\r\n                          chatPreview={chatInfo.chatPreview}\r\n                          isSelected={chatInfo.isSelected}\r\n                          onChatSelected={onChatSelected}/>\r\n            ))}\r\n        </div>\r\n    );\r\n};","import {groupBy} from \"./group-by\";\r\n\r\nexport interface Group<TData, TKey> {\r\n    key: TKey,\r\n    items: TData[]\r\n}\r\n\r\n/**\r\n * Группировка данных по ключу. Ключ сравниваются через ===. Возвращает массив объектов {ключ, значения}.\r\n * @param arr Данные\r\n * @param keySelector Селектор ключа\r\n */\r\nexport function groupByAsArray<TData, TKey>(arr: TData[], keySelector: (item: TData) => TKey): Group<TData, TKey>[] {\r\n    const map = groupBy(arr, keySelector);\r\n    const res: Group<TData, TKey>[] = [];\r\n    map.forEach((values, key) => res.push({key: key, items: values}));\r\n    return res;\r\n}","/**\r\n * Группировка данных по ключу. Ключ сравниваются через ===. Возвращает js Map.\r\n * @param arr Данные\r\n * @param keySelector Селектор ключа\r\n */\r\nexport function groupBy<TData, TKey>(arr: TData[], keySelector: (item: TData) => TKey): Map<TKey, TData[]> {\r\n    const groups = new Map<TKey, TData[]>();\r\n\r\n    for (const item of arr) {\r\n        const key = keySelector(item);\r\n        if (groups.has(key)) {\r\n            const groupItem = groups.get(key);\r\n            if (groupItem == null) {\r\n                throw new Error('Unexpected error occured');\r\n            }\r\n            groupItem.push(item);\r\n        } else {\r\n            groups.set(key, [item]);\r\n        }\r\n    }\r\n\r\n    return groups;\r\n}","import React from 'react'\r\nimport './MessageItem.css'\r\nimport {format} from \"date-fns\";\r\nimport {IMessage} from \"../../../model/i-message\";\r\n\r\nexport const MessageItem: React.FunctionComponent<IMessage> = ({author, avatarUrl, date, message}) => {\r\n\r\n    const formattedTime = format(date, 'HH:mm'); // HH - 24h format\r\n\r\n    return (\r\n        <div className=\"message-item\">\r\n            <img src={avatarUrl} className=\"message-item__avatar\" alt=\"user avatar\"/>\r\n            <div className=\"message-item__all-text-container\">\r\n                <div className=\"message-item__author-and-date-container\">\r\n                    <span className=\"message-item__author\">{author}</span>\r\n                    <span className=\"message-item__date\">{formattedTime}</span>\r\n                </div>\r\n                <div className=\"message-item__author-and-message-container\">\r\n                    <div className=\"message-item__message\">{message}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport {IMessage} from \"../../../model/i-message\";\r\nimport {format} from \"date-fns\";\r\nimport {MessageItem} from \"../message-item/MessageItem\";\r\n\r\ninterface IProps {\r\n    date: Date;\r\n    messages: IMessage[]\r\n}\r\n\r\nexport const MessagesGroup: React.FunctionComponent<IProps> = ({date, messages}) => (\r\n    <div>\r\n        <div className=\"date\">{format(date, 'dd.MM.yyyy')}</div>\r\n        {messages.map(msg => (<MessageItem {...msg}/>))}\r\n    </div>\r\n);","import React from 'react'\r\nimport {IMessage} from \"../../../model/i-message\";\r\nimport './MessagesList.css'\r\nimport {startOfDay} from \"date-fns\";\r\nimport {groupByAsArray} from \"../../../utils/group-by-as-array\";\r\nimport {sortBy} from \"../../../utils/sort-by\";\r\nimport {MessagesGroup} from \"../messages-group/MessagesGroup\";\r\n\r\ninterface IProps {\r\n    messages?: IMessage[];\r\n}\r\n\r\nexport const MessageList: React.FunctionComponent<IProps> = ({messages}) => {\r\n\r\n    const grouppedMessagesArray = groupByAsArray(messages || [], msg => startOfDay(msg.date).getTime());\r\n    const grouppedMessages = sortBy(grouppedMessagesArray, group => group.key, (a, b) => a - b)\r\n        .map(group => ({date: new Date(group.key), messages: group.items}));\r\n\r\n    return (\r\n        <div className=\"messages-list-container\">\r\n            {grouppedMessages.map(group => (\r\n                <MessagesGroup key={group.date.getTime()} date={group.date} messages={group.messages}/>))}\r\n        </div>)\r\n}","/**\r\n * Сортировка массива объектов по ключу\r\n * @param arr Массив\r\n * @param keySelector Селектор ключа\r\n * @param compareFn Функция сравнения ключей\r\n */\r\nexport function sortBy<TData, TKey>(arr: TData[],\r\n                                    keySelector: (item: TData) => TKey,\r\n                                    compareFn?: ((a: TKey, b: TKey) => number)): TData[] {\r\n    // не паримся за сложность алгоритма, надеемся на маленькие объемы С=\r\n    const res: TData[] = [];\r\n    const sortedKeys = arr.map(keySelector).sort(compareFn);\r\n    for (const key of sortedKeys) {\r\n        const items = arr.find(item => keySelector(item) === key);\r\n        if (items == null) {\r\n            throw new Error('Unexpected error occured');\r\n        }\r\n        res.push(items);\r\n    }\r\n\r\n    return res;\r\n}","import React from 'react';\r\nimport {IChatPreview} from \"../../model/i-chat-preview\";\r\nimport {IMessage} from \"../../model/i-message\";\r\nimport './Chat.css'\r\nimport {chatMessages, chats} from \"../../stub-data\";\r\nimport {ChatList} from \"./chat-list/ChatList\";\r\nimport {MessageList} from \"./messages-list/MessagesList\";\r\n\r\ninterface IState {\r\n    chats: IChatPreview[],\r\n    selectedChatId?: number | null; // if null then no chat is selected\r\n    selectedChatMessages?: IMessage[]; // if null then no chat is selected\r\n}\r\n\r\nexport class Chat extends React.Component {\r\n    state: IState = {\r\n        chats: chats,\r\n        selectedChatMessages: [],\r\n        selectedChatId: null\r\n    }\r\n\r\n    getChatMessages(chatId: number): IMessage[] { // как будто сходили на бэк лел\r\n        const res = chatMessages.find(msgs => msgs.chatId === chatId);\r\n        return res != null ? res.messages : [];\r\n    }\r\n\r\n    onChatSelected = (id: number) => {\r\n        const messages = this.getChatMessages(id);\r\n        this.setState({...this.state, selectedChatId: id, selectedChatMessages: messages});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chat-window\">\r\n                <ChatList chatPreviews={this.state.chats}\r\n                          selectedChatId={this.state.selectedChatId}\r\n                          onChatSelected={this.onChatSelected}/>\r\n                <MessageList messages={this.state.selectedChatMessages}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Chat} from \"../chat/Chat\";\r\n\r\nexport const App: React.FunctionComponent = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <Chat/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./components/app/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}